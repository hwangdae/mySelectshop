// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions") //실제 데이터베이스 컬럼 이르뫄 Prisma 모델 필드 이름을 매핑함 이름이 달라도 데이터베이스 입출력이 가능하게 함
}

enum UserType {
  User
  Admin
}

model User {
  id             String    @id @default(cuid())
  name           String
  hashedPassword String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  followings     Follow[]  @relation("UserFollowing")
  followers      Follow[]  @relation("UserFollowers")
  reviews        Review[]  @relation("UserReviews")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id            String   @id @default(cuid())
  reviewImages  String?
  description   String
  advantages    String[]
  disAdvantages String[]
  tags          String?
  selectshopId  String
  userId        String
  user          User     @relation(fields: [userId], references: [id], name: "UserReviews")

  @@unique([selectshopId, userId])
}

model Follow {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation(fields: [followerId], references: [id], onDelete: Cascade, name: "UserFollowers")
  following User @relation(fields: [followingId], references: [id], onDelete: Cascade, name: "UserFollowing")

  @@id([followerId, followingId])
}
